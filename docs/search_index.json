[["index.html", "GIS Tools for Qualitative Social Scientists 1 Introduction", " GIS Tools for Qualitative Social Scientists Aditya Ranganath 2022-02-01 1 Introduction This tutorial provides a brief overview on how to map categorical data using R Studio and QGIS. We will be mapping data on the partisan composition of state governments in the United States. In particular, we will visualize whether a state government is characterized by unified Democratic control (a “Democratic Trifecta”), unified Republican control (a “Republican Trifecta”), or divided government. Current data on trifectas/divided government comes from Ballotpedia. Data to complete the exercises can be found here: https://drive.google.com/drive/folders/1OsN9qxzflMAu7HAWz1qGffUkGZbnblxt?usp=sharing. "],["building-static-maps-in-r-studio.html", "2 Building Static Maps in R Studio 2.1 Load your libraries and set your working directory 2.2 Read in a spatial dataset 2.3 View the spatial dataset’s attribute table 2.4 Map the spatial dataset 2.5 Read in the tabular dataset containing the information to map 2.6 Merge data 2.7 Map the trifecta data 2.8 Summary Script", " 2 Building Static Maps in R Studio 2.1 Load your libraries and set your working directory # Load libraries library(tmap) library(sf) library(tidyverse) If you don’t already have the packages installed, you must install them before loading the libraries; you can install the libraries with the following: install.packages(c(&quot;tmap&quot;, &quot;sf&quot;, &quot;tidyverse&quot;)) After your libraries are successfully installed and loaded, set your working directory by passing the file path of the directory that contains your data to the setwd function, as in the example below (but note your file path will look different). # Set your working directory to the directory containing your data setwd(&quot;/Users/adra7980/Documents/git_repositories/gistools_qda/data&quot;) If you don’t know the relevant file path, you can set your working directory manually by opening the Session menu, scrolling down to Set Working Directory, clicking Choose Directory, and then following the prompts. 2.2 Read in a spatial dataset First, let’s read in our spatial dataset, titled usa_shapefile.shp using the st_read function, and then assigning the spatial dataset to a new object named usa_shapefile # Read in the shapefile named &quot;usa_shapefile.shp&quot; and assign to new object named &quot;usa_shapefile&quot; usa_shapefile&lt;-st_read(&quot;usa_shapefile.shp&quot;) ## Reading layer `usa_shapefile&#39; from data source `/Users/adra7980/Documents/git_repositories/gistools_qda/data/usa_shapefile.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 52 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -4088650 ymin: -1696697 xmax: 2258200 ymax: 1565782 ## projected CRS: USA_Contiguous_Albers_Equal_Area_Conic 2.3 View the spatial dataset’s attribute table To view the spatial dataset’s attributes, simply print its name: usa_shapefile ## Simple feature collection with 52 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -4088650 ymin: -1696697 xmax: 2258200 ymax: 1565782 ## projected CRS: USA_Contiguous_Albers_Equal_Area_Conic ## First 10 features: ## GEOID name abbrev geometry ## 1 23 Maine ME MULTIPOLYGON (((2217413 111... ## 2 25 Massachusetts MA MULTIPOLYGON (((2057879 734... ## 3 26 Michigan MI MULTIPOLYGON (((548934.7 12... ## 4 30 Montana MT MULTIPOLYGON (((-633753 865... ## 5 32 Nevada NV MULTIPOLYGON (((-1581791 94... ## 6 34 New Jersey NJ MULTIPOLYGON (((1727369 428... ## 7 36 New York NY MULTIPOLYGON (((1977956 675... ## 8 37 North Carolina NC MULTIPOLYGON (((1192302 -79... ## 9 39 Ohio OH MULTIPOLYGON (((1085606 548... ## 10 42 Pennsylvania PA MULTIPOLYGON (((1733137 446... To view the attribute table in R Studio’s data viewer, pass it to the View function: View(usa_shapefile) 2.4 Map the spatial dataset To view render the spatial dataset’s geographic attributes, we can use the tmap package. First, pass the name of the spatial object (usa_shapefile) to the tm_shape function, and then indicate that the spatial attributes are polyons with the tm_polygons function. The two functions should be connected with a + sign ## tmap mode set to plotting # Use the &quot;tm_shape&quot; and &quot;tm_polygons&quot; function to render the polygons in the spatial dataset tm_shape(usa_shapefile)+ tm_polygons() The polygons (here, US states) will be printed in the “Plots” tab of the R Studio interface. For convenience, we can assign the basic map of the shapefile’s polygons to its own object; here we’ll assign it to an object named usa_map. ## tmap mode set to plotting # Assigns map of &quot;usa_shapefile&quot; geographic attributes to a new object named &quot;usa_map&quot; usa_map&lt;-tm_shape(usa_shapefile)+ tm_polygons() Now, we simply have to print usa_map to view the geographic attributes of usa_shapefile. ## tmap mode set to plotting usa_map 2.5 Read in the tabular dataset containing the information to map Now, let’s read in our CSV file, which contains the state government data we’d like to map. To do so, we can pass the name of the CSV file to the read_csv function. We’ll assign the CSV file to an object named usa_trifecta # Reads in &quot;usa_trifecta.csv&quot; and assigns the data to an object named &quot;usa_trifecta&quot; usa_trifecta&lt;-read_csv(&quot;usa_trifecta.csv&quot;) ## ## ── Column specification ───────────────────────────────────────────────────────────────────────────────────────── ## cols( ## GEOID = col_double(), ## NAME = col_character(), ## abbrev = col_character(), ## Composition = col_character() ## ) To open the dataset, type the name of the object in the console (or run it from your script): usa_trifecta ## # A tibble: 50 x 4 ## GEOID NAME abbrev Composition ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Alabama AL Republican Trifecta ## 2 2 Alaska AK Divided Government ## 3 4 Arizona AZ Republican Trifecta ## 4 5 Arkansas AR Republican Trifecta ## 5 6 California CA Democratic Trifecta ## 6 8 Colorado CO Democratic Trifecta ## 7 9 Connecticut CT Democratic Trifecta ## 8 10 Delaware DE Democratic Trifecta ## 9 12 Florida FL Republican Trifecta ## 10 13 Georgia GA Republican Trifecta ## # … with 40 more rows To view the CSV data in R Studio’s data viewer, pass the object’s name to the View function: View(usa_trifecta) 2.6 Merge data Now, let’s merge our tabular CSV data into the spatial dataset, and assign the merged dataset to a new object named usa_shapefile_trifecta. To do so, we’ll use the right_join function. The first argument is the spatial object (usa_shapefile), while the second argument is the tabular data object (usa_trifecta). The third argument, by=\"abbrev indicates that the two datasets are to be joined based on the information contained in the abbrev field (i.e. 2-letter state codes). By using right_join, we’re specifying that we want to keep all the records in usa_trifecta, and discard any records that are in usa_shapefile but not usa_trifecta. This effectively removes DC and Puerto Rico from our joined dataset, which is appropriate in the context of this exercise, since these are not currently states. # Joins the &quot;usa_trifecta&quot; data to &quot;usa_shapefile&quot; based on the &quot;abbrev&quot; field that is in both datasets; the joined dataset is assigned to a new object named &quot;usa_shapefile_trifecta&quot; usa_shapefile_trifecta&lt;-right_join(usa_shapefile, usa_trifecta, by=&quot;abbrev&quot; ) Before moving on, observe the contents of usa_shapefile_trifecta to ensure that the join has succeeded. # Prints contents of &quot;usa_shapefile_trifecta&quot; usa_shapefile_trifecta ## Simple feature collection with 50 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -4088650 ymin: -1696697 xmax: 2258200 ymax: 1565782 ## projected CRS: USA_Contiguous_Albers_Equal_Area_Conic ## First 10 features: ## GEOID.x name abbrev GEOID.y NAME Composition geometry ## 1 23 Maine ME 23 Maine Democratic Trifecta MULTIPOLYGON (((2217413 111... ## 2 25 Massachusetts MA 25 Massachusetts Divided Government MULTIPOLYGON (((2057879 734... ## 3 26 Michigan MI 26 Michigan Divided Government MULTIPOLYGON (((548934.7 12... ## 4 30 Montana MT 30 Montana Republican Trifecta MULTIPOLYGON (((-633753 865... ## 5 32 Nevada NV 32 Nevada Democratic Trifecta MULTIPOLYGON (((-1581791 94... ## 6 34 New Jersey NJ 34 New Jersey Democratic Trifecta MULTIPOLYGON (((1727369 428... ## 7 36 New York NY 36 New York Democratic Trifecta MULTIPOLYGON (((1977956 675... ## 8 37 North Carolina NC 37 North Carolina Divided Government MULTIPOLYGON (((1192302 -79... ## 9 39 Ohio OH 39 Ohio Republican Trifecta MULTIPOLYGON (((1085606 548... ## 10 42 Pennsylvania PA 42 Pennsylvania Divided Government MULTIPOLYGON (((1733137 446... 2.7 Map the trifecta data Now, we’re ready to map our data. Let’s start with a very rough map, which we’ll assign to an object named usa_trifecta_map. As before, we declare the spatial object that is the basis for the map (here, usa_shapefile_trifecta) using the tm_shape function. Then, we declare the column to be mapped (here, Composition) within the tm_polygons function: ## tmap mode set to plotting # Makes basic map of categories of interest usa_trifecta_map&lt;-tm_shape(usa_shapefile_trifecta)+ tm_polygons(col=&quot;Composition&quot;) # Prints map usa_trifecta_map This default color scheme is not very intuitive, so let’s change it, such that Democratic trifectas are dark blue, Republican trifectas are dark red, and states with divided government are beige. To work intuitively with colors when dealing with categorical data, it is helpful to first declare the categorical data as a factor variable; specify the levels in the order you want your categories in the legend. ## tmap mode set to plotting # Sets composition variable as factor usa_shapefile_trifecta&lt;-usa_shapefile_trifecta %&gt;% mutate(Composition=factor(Composition, levels=c(&quot;Democratic Trifecta&quot;, &quot;Republican Trifecta&quot;, &quot;Divided Government&quot;))) Now, create a vector of colors that corresponds to these levels, and assign this vector to an object named ` colors. The first color in the colors vector will be used for the “Democratic Trifecta” category, the second color for “Republican Trifecta”, and so on. The color codes can be found in this helpful color cheatsheet. Set the colors vector equal to palette within the tm_polygons function: ## tmap mode set to plotting # Maps data with custom colors; also, note the changed order in the legend colors&lt;-c(&quot;navy&quot;, &quot;red3&quot;, &quot;seashell&quot;) usa_trifecta_map&lt;-tm_shape(usa_shapefile_trifecta)+ tm_polygons(col=&quot;Composition&quot;, palette=colors) usa_trifecta_map Now, let’s shift the legend, remove the bounding box, remove the legend title, and add a title for the map. ## tmap mode set to plotting usa_trifecta_map&lt;-usa_trifecta_map&lt;-tm_shape(usa_shapefile_trifecta)+ # indicates spatial object to map tm_polygons(col=&quot;Composition&quot;, # indicates column with data to map palette=colors, # sets colors title=&quot;&quot;)+ # removes legend title tm_layout(legend.position = c(&quot;left&quot;, &quot;center&quot;), # sets legend position frame=FALSE, # removes map frame main.title=&quot;Partisan Composition of State Governments, 2022&quot;, # sets map title main.title.size=1, # sets map title size main.title.position=&quot;center&quot;) # sets map title position usa_trifecta_map Now, let’s add a credits section, to indicate the map’s author and give credit to the source of the data. We can do so with the tm_credits function: usa_trifecta_map&lt;-usa_trifecta_map+ tm_credits(&quot;Map Author: Aditya Ranganath\\nSource: Ballotpedia&quot;, size=0.5) # sets map credits and size usa_trifecta_map 2.8 Summary Script The following presents all of the steps we took to create our print map in one streamlined script; it assumes that the libraries are loaded, and that you are in the working directory that contains your data: # Read in shapefile and assign to object named &quot;usa_shapefile&quot; usa_shapefile&lt;-st_read(&quot;usa_shapefile.shp&quot;) ## Reading layer `usa_shapefile&#39; from data source `/Users/adra7980/Documents/git_repositories/gistools_qda/data/usa_shapefile.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 52 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -4088650 ymin: -1696697 xmax: 2258200 ymax: 1565782 ## projected CRS: USA_Contiguous_Albers_Equal_Area_Conic # Read in tabular CSV data containing data to map and assign to object named &quot;usa_trifecta&quot; usa_trifecta&lt;-read_csv(&quot;usa_trifecta.csv&quot;) # Join &quot;usa_trifecta&quot; to &quot;usa_shapefile&quot; using &quot;abbrev&quot; as the join variable; use &quot;right_join&quot; to only keep records from &quot;usa_trifecta&quot; (which effectively deletes PR and DC); assign the joined dataset to a new object named &quot;usa_shapefile_trifecta&quot; usa_shapefile_trifecta&lt;-right_join(usa_shapefile, usa_trifecta, by=&quot;abbrev&quot;) # Set the composition variable as a factor variable; specify the levels in the order you want them to appear in the legend usa_shapefile_trifecta&lt;-usa_shapefile_trifecta %&gt;% mutate(Composition=factor(Composition, levels=c(&quot;Democratic Trifecta&quot;, &quot;Republican Trifecta&quot;, &quot;Divided Government&quot;))) # create a color vector; the first color will be used to map the first level, second category to map the second level, and so on: colors&lt;-c(&quot;navy&quot;, &quot;red3&quot;, &quot;seashell&quot;) # Use tmap to create the map, and assign the map to an object named &quot;usa_trifecta_map&quot; usa_trifecta_map&lt;-tm_shape(usa_shapefile_trifecta)+ # indicate sf object to be mapped tm_polygons(col=&quot;Composition&quot;, # specify column to be mapped palette=colors, # sets tolors title=&quot;&quot;)+ # specifies no title for legend tm_layout(legend.position = c(&quot;left&quot;, &quot;center&quot;), # sets legend position frame=FALSE, # removes map frame/bounding box main.title=&quot;Partisan Composition of State Governments, 2022&quot;, # sets map title main.title.size=1, # sets map title size main.title.position=&quot;center&quot;)+ # sets map title position tm_credits(&quot;Map Author: Aditya Ranganath\\nSource: Ballotpedia&quot;, size=0.5) # adds credits # Prints map usa_trifecta_map "],["building-web-maps-in-r-studio.html", "3 Building Web Maps in R Studio", " 3 Building Web Maps in R Studio To create a webmap/interactive map, simply use the tmap_mode function to set the mode to view: tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing Now, when you plot the map, it will appear interactive: usa_trifecta_map ## Credits not supported in view mode. ## legend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode. To shift back to a static map, set the mode back to plot: tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting And now, when printing the map again, it will be displayed again as a static map. usa_trifecta_map The webmap looks a little strange with Alaska and Hawaii shifted. So, let’s make a webmap that shifts Alaska and Hawaii back to their actual locations. To do so, we’ll read in the shapefile with Alaska and Hawaii in their proper locations, and assign it to an object named usa_unshifted. usa_unshifted&lt;-st_read(&quot;usa_unshifted.shp&quot;) ## Reading layer `usa_unshifted&#39; from data source `/Users/adra7980/Documents/git_repositories/gistools_qda/data/usa_unshifted.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 52 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -179.1473 ymin: 17.88481 xmax: 179.7785 ymax: 71.35256 ## geographic CRS: NAD83 usa_unshifted ## Simple feature collection with 52 features and 3 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -179.1473 ymin: 17.88481 xmax: 179.7785 ymax: 71.35256 ## geographic CRS: NAD83 ## First 10 features: ## GEOID NAME abbrev geometry ## 1 23 Maine ME MULTIPOLYGON (((-67.61976 4... ## 2 25 Massachusetts MA MULTIPOLYGON (((-70.83204 4... ## 3 26 Michigan MI MULTIPOLYGON (((-88.68443 4... ## 4 30 Montana MT MULTIPOLYGON (((-104.0577 4... ## 5 32 Nevada NV MULTIPOLYGON (((-114.0506 3... ## 6 34 New Jersey NJ MULTIPOLYGON (((-75.52684 3... ## 7 36 New York NY MULTIPOLYGON (((-71.94356 4... ## 8 37 North Carolina NC MULTIPOLYGON (((-82.60288 3... ## 9 39 Ohio OH MULTIPOLYGON (((-82.81349 4... ## 10 42 Pennsylvania PA MULTIPOLYGON (((-75.41504 3... Then, we’ll go through the same steps as above, to essentially recreate our map with this new spatial dataset. When we go back to View mode and print our new map object, we’ll see a dynamic map with Hawaii and Alaska in their original locations. # join tabular data to &quot;usa_unshifted&quot; usa_unshifted_trifecta&lt;-inner_join(usa_unshifted, usa_trifecta_data, by=&quot;abbrev&quot;) # sets factor usa_unshifted_trifecta&lt;-usa_unshifted_trifecta %&gt;% mutate(Composition=factor(Composition, levels=c(&quot;Democratic Trifecta&quot;, &quot;Republican Trifecta&quot;, &quot;Divided Government&quot;))) %&gt;% rename(State=NAME.x) %&gt;% relocate(State, Composition) # recreate map usa_trifecta_map_unshifed&lt;-tm_shape(usa_unshifted_trifecta)+ tm_polygons(col=&quot;Composition&quot;, palette=colors, title=&quot;&quot;)+ tm_layout(frame=FALSE, main.title=&quot;Partisan Composition of State Governments, 2022&quot;, main.title.size=1, main.title.position=&quot;center&quot;) # change to view mode tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing usa_trifecta_map_unshifed ## tmap mode set to plotting "],["exporting-maps-from-r-studio.html", "4 Exporting Maps from R Studio", " 4 Exporting Maps from R Studio First, let’s export our print map to our working directory, using the tmap_save function. The first argument is the name of the object to be exported, while the second argument is the desired name and extension of the exported file containing the map. For example, if we wanted to export the map as a png file, we would use the following: # Writes print map (&quot;usa_trifecta_map&quot;) to working directory as png file tmap_save(usa_trifecta_map, &quot;usa_trifecta_map_export.png&quot;) ## Map saved to /Users/adra7980/Documents/git_repositories/gistools_qda/usa_trifecta_map_export.png ## Resolution: 2929.035 by 1505.615 pixels ## Size: 9.76345 by 5.018718 inches (300 dpi) If you want to export a webmap, use the same functions and arguments, but make sure to use an html extension for the output files; an interactive map will be saved to your working directory, which you can then embed on a website. # Writes webmap to working directory as html file tmap_save(usa_trifecta_map, &quot;usa_trifecta_map_unshifed.html&quot;) ## Credits not supported in view mode. ## legend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode. ## Interactive map saved to /Users/adra7980/Documents/git_repositories/gistools_qda/usa_trifecta_map_unshifed.html "],["building-maps-in-quantum-geographic-information-systems-qgis.html", "5 Building Maps in Quantum Geographic Information Systems (QGIS) 5.1 Adding a spatial dataset to QGIS 5.2 Inspect the shapefile’s attribute table 5.3 Add tabular CSV data to QGIS 5.4 Join the tabular data (usa_trifecta_data) to the shapefile (usa_shapefile) 5.5 Display the state government categorical data on the shapefile 5.6 Make a print map using the Print Layout interface 5.7 Export the completed map from QGIS", " 5 Building Maps in Quantum Geographic Information Systems (QGIS) When you open up a new QGIS project, the interface will look something like this: Figure 5.1: The main QGIS window 5.1 Adding a spatial dataset to QGIS To add a spatial dataset (and in particular, a shapefile) to QGIS, first select Layer from the top menu, scroll down to Add Layer and then select Add Vector Layer: Figure 5.2: Navigating to the ‘Add Vector Layer’ Menu This will open up the Data Source Manager|Vector dialog box. Under the Source tab, click on the ellipsis that is to the right of the box next to the Vector Dataset(s) label. This Browse button will open up another dialog box, from which you can navigate to the directory containing your shapefile. Figure 5.3: Click the ‘Browse’ button to navigate to your shapefile Once you are in the directory containing the shapefile you want to import, select the file with the .shp extension, and click Open. Figure 5.4: Select shapefile from directory At this point, you will see the file path to the shapefile under the Source tab. Once you see this path, go ahead and click the Add button: Figure 5.5: Confirm the shapefile’s path and click ‘Add’ Once the shapefile has been added, it will appear in the QGIS project window. Note that the color of the shapefile when it is first imported is arbitrarily set by QGIS, but this initial color can always be changed. Figure 5.6: The rendered shapefile/spatial dataset rendered in the QGIS project window 5.2 Inspect the shapefile’s attribute table To inspect the attribute table that is associated with the shapefile, right-click on the shapefile in the Layers window, and select Open Attribute Table. Figure 5.7: Open the the shapefile’s attribute table When the attribute table is open, it will look something like this. When you select a record in the attribute table (by clicking on it), the corresponding geographic attribute will automatically be selected on the map (and vice versa). Here, we clicked on the Colorado record within the attribute table, which simultaneously highlighted Colorado on the shapefile’s geographic representation in the project window: Figure 5.8: Select a record within the opened attribute table If you want to deselect a selected record, click the Deselect all features from the layer button in the menu bar on top of the attribute table: Figure 5.9: Deselect a selected record 5.3 Add tabular CSV data to QGIS Having adding the shapefile to QGIS, let’s import the tabular dataset (stored as a CSV file) that contains information on partisan control over state governments, which is the data that we want to ultimately visualize on a map. To add the CSV file, click the Layer menu from the QGIS menu bar, and then select Add Layer followed by Add Delimited Text Layer: Figure 5.10: Navigate to menu that facilitates the importing of tabular data Click on the ellipsis next to the File name bar, and then navigate to the CSV file on your computer and add it; at this point, the file path to the CSV will appear next to the File name bar. Under the File Format section, make sure that the CSV (comma separated values) button is selected. Finally, under the Geometry Definition section, select the No geometry (attribute table only) button. Once these selections are made, go ahead and click the Add button on the bottom of the dialog box. Figure 5.11: Set paremeters before adding the CSV file At this point, you’ll notice the CSV file (named usa_trifecta_data) added to the Layers section on the bottom-left of the QGIS interface (right above the shapefile). To inspect the CSV file, right-click on the file in the Layers menu, and select Open Attribute Table, Figure 5.12: Open the CSV file within QGIS The tabular dataset/CSV file, when opened up in QGIS, will look something like this: Figure 5.13: The tabular dataset open within QGIS 5.4 Join the tabular data (usa_trifecta_data) to the shapefile (usa_shapefile) Now that we have both the shapefile and tabular CSV data in QGIS, let’s join the latter to the former so that we can display our data of interest on a map. To initiate the join, right-click the shapefile (usa_shapefile) in the Layers box, and select Properties. Figure 5.14: Open the ‘properties’ dialog box Within the Layer Properties dialog box that opens up, select the Joins tab. Once the Joins tab is open, you’ll see a green + sign on the lower left. Go ahead and select it to open the Add Vector Join dialog box: Figure 5.15: Initiating a join Once the Add Vector Join dialog box is open, select the name of the CSV file within the Join layer dialog box. Select abbrev for both Join field and Target field, since the name of the variable we’re matching on is abbrev in both datasets (recall that the abbrev field contains two-letter state abbreviations). If, for example, the name of the field containing abbreviations was abbreviations in the shapefile, but abbrev in the CSV dataset, you would have selected abbreviations in Join field and abbrev in Target field. After making these selections, go ahead and click OK to close the Add vector join dialog box: Figure 5.16: The ‘Add vector join’ dialog box Then, finalize the join by clicking OK within the Layer Properties dialog box: Figure 5.17: Finalize join When you right-click the shapefile in the Layers box on the bottom-left and open up the attribute table, you’ll note that our data of interest from the CSV has been added to the shapefile: Figure 5.18: Shapefile’s attribute table after join 5.5 Display the state government categorical data on the shapefile Now that the data we would like to map is attached to the shapefile, let’s go ahead and map it. To do so, right-click the shapefile from the Layers box, and select Properties (just as you did to implement the join). This time, once the Layer Properties dialog box is open, select the Symbology tab: Figure 5.19: Opening the Symbology tab from the Properties dialog box On the top of the Symbology tab that opens up, you’ll note a drop-down menu; select Categorized since we’re working with categorical data. Figure 5.20: Select classification scheme from menu bar; here, ‘Categorized’ Next to the Value field, select usa_trifecta_data_Composition, which is the name of the field in the shapefile that we’d like to map: Figure 5.21: Select column containing categories to be mapped from the ‘value’ drop-down menu Once you do so, you’ll see that field’s categories appear, with arbitrary colors next to them. Deselect the Symbol tick mark next to all other values; this removes Puerto Rico and DC from the map, which is appropriate since we’re only interested in current states. Figure 5.22: Select categories to be displayed To change the color used to represent a given category, simply double-click on the square color button next to it, and choose the desired color in the Color menu of the Symbol Selector dialog box: Figure 5.23: Select colors for each category Once you’ve finished making your desired color selections, click Apply on the bottom-left of the dialog box. Then, go ahead and click OK: Figure 5.24: Apply color changes At this point, the shapefile will look something like this: Figure 5.25: Map with changes applied The data has been visualized on your shapefile! 5.6 Make a print map using the Print Layout interface At this point, we can turn to the process of turning this shapefile into an exportable print map in QGIS. First, select Project from the topmost QGIS menu bar, and select New Print Layout. Figure 5.26: Open Print Layout You will be prompoted to give your print layout a descriptive name: Figure 5.27: Give Print Layout a title The Print Layout that opens will look something like the image below. To add the image of our shapefile to the print layout, click on the Add Item menu bar on top, and choose Add Map: Figure 5.28: Click ‘Add Map’ from the ‘Add Item’ menu bar After selecting Add Map, click on the top-left of the map canvas, and drag to the bottom-right: Figure 5.29: Click and drag across the map canvas This will add an image to the print layout that is based on the shapefile that is open in the main QGIS project window: Figure 5.30: Shapefile imported into QGIS print layout as a map To add a legend, click the Add Item menu from the print layout’s menu bar, and select Add Legend: Figure 5.31: Add a legend from the ‘Add Item’ menu Click and drag in approximately the area you’d like the legend to appear (but note that you can move anything added to the print layout by simply clicking and dragging). On the right, you’ll see a Legend Properties dialog box that will allow you to customize the initial appearance of the legend: Figure 5.32: Legend’s initial appearance Let’s make a few changes to the legend. We’ll remove the title and subtitles (i.e. “usa_trifecta_data”, and “usa_shapefile”) and remove the final, turquoise square (which was used to represent NA values, but which no longer serves a purpose since we removed PR and DC from the map). First, uncheck the Auto update button in the Legend Items section: Figure 5.33: Uncheck the auto update button Scroll down, and highlight the row containing the turquoise square. Then, click the red - button to remove it: Figure 5.34: Remove superfluous legend category To remove the usa_shapefile label, right-click it in the Legend Properties dialog box, and click Hidden: Figure 5.35: Remove superfluous legend label Repeat this process for the usa_trifecta_data title. To increase the size or font of the legend text, first scroll down in the Legend Properties dialog box to the Fonts and Text Formatting section: Figure 5.36: Scroll to legend dialog box’s ‘Font’ section Then, click on the Font drop-down menu below the Item Labels subsection: Figure 5.37: Click on the ‘Font’ button under the ‘Item Labels’ heading A Text Format dialog box will then open up, allowing you to customize the legend’s font and other aspects of its appearance: Figure 5.38: Set legend font preferences To add a map title (or any other text) to your map, select the Add Item menu, and click Add Label: Figure 5.39: Click ‘Add Label’ from the ‘Add Item’ menu Click and drag to create a text box. You can alter the text within the text box in the Label Properties dialog box that opens to the right: Figure 5.40: Print the text for the title in the ‘Main Properties’ dialog box associated with the label You can alter the title’s font and size by clicking the Font drag-down menu that lies right below the Appearance label. This will open up the Text Format dialog box, which allows you to customize your text’s appearance: Figure 5.41: Customize the title’s font and size You can add and customize a map credits section using the same process (i.e. add and customize another label) Figure 5.42: Add map credits 5.7 Export the completed map from QGIS Once the map is satisfactory, you can export it by selected Layout from the QGIS menu, and selecting the option to export either as an image, SVG, or PDF file. Once you follow the subsequent prompts, the map will be written to your disk in the location you specify: Figure 5.43: Exporting a completed map from QGIS Once you’ve exported the map, open it up and ensure that everything looks in order: Figure 5.44: The map exported from QGIS as a png file "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
